import os
import requests
import random
import asyncio
import telegram
from telegram import InputMediaPhoto, InputMediaVideo, Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from fastapi import FastAPI, Request
from nest_asyncio import apply

# √Åp d·ª•ng nest_asyncio ƒë·ªÉ h·ªó tr·ª£ async trong m√¥i tr∆∞·ªùng kh√¥ng ƒë·ªìng b·ªô
apply()

# C·∫•u h√¨nh bot v√† c√°c API c·∫ßn thi·∫øt
BOT_TOKEN = "8064426886:AAE5Zr980N-8LhGgnXGqUXwqlPthvdKA9H0"
API_KEY = "5d2e33c19847dea76f4fdb49695fd81aa669af86"
API_URL = "https://vuotlink.vip/api"
bot = telegram.Bot(token=BOT_TOKEN)

media_groups = {}
processing_tasks = {}

# T·∫°o ·ª©ng d·ª•ng FastAPI
app = FastAPI()
telegram_app = Application.builder().token(BOT_TOKEN).build()

# H√†m x·ª≠ l√Ω l·ªánh /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or update.effective_chat.type != "private":
        return
    await update.message.reply_text(
        "**üëã Ch√†o m·ª´ng n!üòç**\n"
        "**üîó G·ª≠i link b·∫•t k·ª≥ ƒë·ªÉ r√∫t g·ªçn.**\n"
        "**üì∑ Chuy·ªÉn ti·∫øp b√†i vi·∫øt k√®m ·∫£nh/video, bot s·∫Ω gi·ªØ nguy√™n caption & r√∫t g·ªçn link trong caption.**\n"
        "**üí¨ M·ªçi th·∫Øc m·∫Øc, h√£y li√™n h·ªá admin.**",
        parse_mode="Markdown"
    )

# H√†m ƒë·ªãnh d·∫°ng l·∫°i text v√† r√∫t g·ªçn link
async def format_text(text: str) -> str:
    lines = text.splitlines()
    new_lines = []
    for line in lines:
        words = line.split()
        new_words = []
        for word in words:
            if word.startswith("http"):
                params = {"api": API_KEY, "url": word, "format": "text"}
                response = requests.get(API_URL, params=params)
                short_link = response.text.strip() if response.status_code == 200 else word
                word = f"<s>{short_link}</s>"
            else:
                word = f"<b>{word}</b>"
            new_words.append(word)
        new_lines.append(" ".join(new_words))

    new_lines.append(
        '\n<b>B√°o l·ªói + ƒë√≥ng g√≥p video t·∫°i ƒë√¢y</b> @nothinginthissss (c√≥ l·ªói s·∫Ω ƒë·ªÅn b√π)\n'
        '<b>Theo d√µi th√¥ng b√°o t·∫°i ƒë√¢y</b> @linkdinhcaovn\n'
        '<b>C√ÅCH XEM LINK(l·ªói bot kh√¥ng g·ª≠i video):</b> @HuongDanVuotLink_SachKhongChu\n\n'
        '‚ö†Ô∏è<b>K√™nh xem kh√¥ng c·∫ßn v∆∞·ª£t :</b> <a href="https://t.me/linkdinhcaovn/4">·∫•n v√†o ƒë√¢y!</a>'
    )

    return "\n".join(new_lines)

# H√†m x·ª≠ l√Ω nh√≥m media (·∫£nh/video)
async def process_media_group(mgid: str, chat_id: int):
    await asyncio.sleep(random.uniform(3, 5))
    group = media_groups.pop(mgid, [])
    if not group:
        await bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è B√†i vi·∫øt kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu ·∫£nh/video.")
        return

    group.sort(key=lambda m: m.message_id)
    caption = await format_text(group[0].caption) if group[0].caption else None
    media = []

    for i, msg in enumerate(group):
        if msg.photo:
            file_id = msg.photo[-1].file_id
            media.append(InputMediaPhoto(file_id, caption=caption if i == 0 else None, parse_mode="HTML"))
        elif msg.video:
            file_id = msg.video.file_id
            media.append(InputMediaVideo(file_id, caption=caption if i == 0 else None, parse_mode="HTML"))

    if not media:
        await bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è B√†i vi·∫øt kh√¥ng c√≥ ·∫£nh ho·∫∑c video h·ª£p l·ªá.")
        return

    try:
        await bot.send_media_group(chat_id=chat_id, media=media)
    except Exception as e:
        print(f"L·ªói khi g·ª≠i media_group: {e}")
        await bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è G·ª≠i b√†i vi·∫øt th·∫•t b·∫°i.")

# H√†m x·ª≠ l√Ω li√™n k·∫øt r√∫t g·ªçn
async def shorten_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or update.effective_chat.type != "private":
        return

    if update.message.media_group_id:
        mgid = update.message.media_group_id
        if mgid not in media_groups:
            media_groups[mgid] = []
            processing_tasks[mgid] = asyncio.create_task(process_media_group(mgid, update.effective_chat.id))
        media_groups[mgid].append(update.message)
        return

    if update.message.photo or update.message.video:
        caption = update.message.caption or ""
        new_caption = await format_text(caption)
        try:
            if update.message.photo:
                file_id = update.message.photo[-1].file_id
                await bot.send_photo(chat_id=update.effective_chat.id, photo=file_id, caption=new_caption, parse_mode="HTML")
            elif update.message.video:
                file_id = update.message.video.file_id
                await bot.send_video(chat_id=update.effective_chat.id, video=file_id, caption=new_caption, parse_mode="HTML")
        except Exception as e:
            print(f"L·ªói khi g·ª≠i ·∫£nh/video ƒë∆°n l·∫ª: {e}")
            await bot.send_message(chat_id=update.effective_chat.id, text="‚ö†Ô∏è G·ª≠i b√†i vi·∫øt th·∫•t b·∫°i.")
        return

    if update.message.text and update.message.text.startswith("http"):
        params = {"api": API_KEY, "url": update.message.text.strip(), "format": "text"}
        response = requests.get(API_URL, params=params)
        if response.status_code == 200:
            short_link = response.text.strip()
            message = (
                "üì¢ <b>B·∫°n c√≥ link r√∫t g·ªçn m·ªõi</b>\n"
                f"üîó <b>Link g·ªëc:</b> <s>{update.message.text}</s>\n"
                f"üîç <b>Link r√∫t g·ªçn:</b> {short_link}\n\n"
                '‚ö†Ô∏è<b>K√™nh xem kh√¥ng c·∫ßn v∆∞·ª£t :</b> <a href="https://t.me/sachkhongchuu/299">·∫•n v√†o ƒë√¢y</a>'
            )
            await update.message.reply_text(message, parse_mode="HTML")
        return

    if update.message.forward_origin:
        caption = update.message.caption or ""
        new_caption = await format_text(caption)
        await update.message.copy(chat_id=update.effective_chat.id, caption=new_caption, parse_mode="HTML")

# Th√™m c√°c handler cho Telegram bot
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, shorten_link))
telegram_app.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.FORWARDED, shorten_link))

# ƒê·ªãnh nghƒ©a webhook cho FastAPI
@app.post("/api/bot")
async def webhook(request: Request):
    data = await request.json()
    update = telegram.Update.de_json(data, bot)
    await telegram_app.process_update(update)
    return {"ok": True}

# Route g·ªëc ƒë·ªÉ ki·ªÉm tra bot c√≥ ƒëang ch·∫°y kh√¥ng
@app.get("/")
async def root():
    return {"message": "Bot is running!"}
